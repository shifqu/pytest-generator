import pytest
{% if functions|length > 0 %}
from {{from_}} import {{import_}}
{% endif %}

{% for item in functions %}
{% if return_ %}
@pytest.mark.parametrize(
    ("args", "expected_output_value"),
    [
        ({{item['args']}},, {{return_}}),
    ],
)
def test_{{item['name']}}(args, expected_output_value):
    return_value = {{import_}}.{{item['name']}}(*args)
    assert return_value == expected_output_value
{%- else %}
@pytest.mark.parametrize(
    ("args",),
    [
        ({{item['args']}},),
    ],
)
def test_{{item['name']}}(args):
    {{import_}}.{{item['name']}}(*args)
{% endif %}
{% endfor %}

{% for class_ in classes %}
{% for item in class_["function"] %}
{% if return_ %}
@pytest.mark.parametrize(
    ("args", "expected_output_value"),
    [
        ({{item['args']}},, {{return_}}),
    ],
)
def test_{{item['name']}}(args, expected_output_value, {{class_['name']|lower}}_fixture):
    return_value = {{class_['name']|lower}}_fixture.{{item['name']}}(*args)
    assert return_value == expected_output_value
{%- else %}
@pytest.mark.parametrize(
    ("args",),
    [
        ({{item['args']}},),
    ],
)
def test_{{item['name']}}(args, {{class_['name']|lower}}_fixture):
    {{class_['name']|lower}}_fixture.{{item['name']}}(*args)
{% endif %}
{% endfor %}
{% endfor %}
